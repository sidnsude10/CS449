import unittest 
from src.sos_game import SOSGame 

class TestBoardSize(unittest.TestCase):
    #tests for handling different board sizes

    def test_valid_board_size(self):
        #game should allow board sizes greater than 2 and create proper dimensions
        game = SOSGame(4)  #testing with a 4x4
        self.assertEqual(len(game.board), 4, "Error: Board should have 4 rows")
        self.assertEqual(len(game.board[0]), 4, "Error: Board should have 4 columns")

    def test_correct_board_size(self):
        #board size should match the expected dimensions
        for size in [3, 5, 7]:  # testing different valid board sizes
            game = SOSGame(size)
            self.assertEqual(len(game.board), size, f"Error: Expected {size} rows but got {len(game.board)}.")
            self.assertEqual(len(game.board[0]), size, f"Error: Expected {size} columns but got {len(game.board[0])}.")

    # AI Generated Test for AC 1.3 (Board Size: Rejects invalid sizes)
    def test_small_board_size(self):
        """
        Game should not allow board sizes of 2 or less.
        This test was originally generated by AI and then refined.
        """
        with self.assertRaises(ValueError, msg="Error in test_small_board_size: Board size 2 should raise ValueError."):
            SOSGame(2)

        with self.assertRaises(ValueError, msg="Error in test_small_board_size: Board size 1 should raise ValueError."):
            SOSGame(1)

if __name__ == '__main__':
    unittest.main()
